#!/usr/bin/python

import paho.mqtt.client as mqtt
import os
from PIL import Image, ImageDraw, ImageFont


# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    #print("Connected with result code "+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe("pond/temperature")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    #print(msg.topic+" "+str(msg.payload))
    if(msg.topic=="pond/temperature"):
        if(float(msg.payload) > 27):
            img = Image.new('RGB', (320, 180), 'white')    
            idraw = ImageDraw.Draw(img)
            idraw.rectangle((2, 2, 318, 178), fill='red')
            idraw.text((20, 50), 'Topic:'+str(msg.topic), font=font)
            idraw.text((20, 80), 'Message:'+str(msg.payload), font=font)
            img.save(tmpFilename)
            os.rename(tmpFilename, realFilename)
        else:
            if(os.path.isfile(realFilename)):
                os.remove(realFilename)

pid = os.getpid()
realFilename=str(pid)+'.tiff'
tmpFilename='X'+realFilename
dir='/tmp/LIVE/'
realFilename=dir+realFilename
tmpFilename=dir+tmpFilename

font = ImageFont.truetype("FreeSans.ttf", 24)


client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect("dashboard.local", 1883, 60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()

